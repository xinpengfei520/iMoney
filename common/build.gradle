apply plugin: 'com.android.library'

android {
    compileSdk rootProject.ext.android.compileSdk
    defaultConfig {
        minSdk rootProject.ext.android.minSdk
        targetSdk rootProject.ext.android.targetSdk
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            // API HOST(生产环境：pro 研发环境：dev 测试环境：test)
            buildConfigField 'String', 'HOST', getHOST('pro')
            // Log日志开关，false不显示log，true显示log
            buildConfigField "boolean", "ENABLE_DEBUG", "false"
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled false
            // API HOST(生产环境：pro 研发环境：dev 测试环境：test)
            buildConfigField 'String', 'HOST', getHOST('pro')
            // Log日志开关，false不显示log，true显示log
            buildConfigField "boolean", "ENABLE_DEBUG", "true"
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation rootProject.ext.dependencies.appcompat_v4
    implementation rootProject.ext.dependencies.appcompat_v7
    testImplementation rootProject.ext.dependencies.junit
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation rootProject.ext.dependencies.gson
    implementation rootProject.ext.dependencies.logger
    implementation rootProject.ext.dependencies.butterknife
    annotationProcessor rootProject.ext.dependencies.butterknife_compiler
    api files('libs/android-async-http-master.jar')
}

// 获取API HOST
@SuppressWarnings("GroovyVariableNotAssigned")
def getHOST(String env) {
    def HOST
    def Properties props = new Properties()
    def propFile = file('src/main/env/' + env + '/config.properties')
    if (propFile.canRead()) {
        props.load(new FileInputStream(propFile))
        if (props != null) {
            HOST = props['HOST']
        }
    }
    HOST
}